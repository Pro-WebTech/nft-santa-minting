{"version":3,"sources":["utils/ids.ts","utils/candymachine.ts","utils/eventEmitter.ts","contexts/accounts.tsx","models/marketOverrides.ts","contexts/connection.tsx","models/dex/market.ts","contexts/market.tsx","components/Navbar/index.tsx","components/Layout/index.tsx","views/mint/index.tsx","views/mint-box/index.tsx","views/process/index.tsx","views/team/index.js","views/exchange/index.tsx","views/home/index.tsx","views/tree/index.tsx","routes.tsx","App.tsx","index.tsx","constants/math.ts","utils/utils.ts","hooks/useUserAccounts.ts"],"names":["WRAPPED_SOL_MINT","PublicKey","TOKEN_PROGRAM_ID","PROGRAM_IDS","name","setProgramIds","envName","find","env","programIds","token","CANDY_MACHINE_PROGRAM","anchor","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","ms","CacheUpdateEvent","isNew","parser","this","type","CacheDeleteEvent","MarketUpdateEvent","ids","CacheClearEvent","EventEmitter","emitter","Emitter","callback","on","removeListener","emit","AccountsContext","React","createContext","pendingCalls","Map","genericCache","transactionCache","MintParser","pubKey","info","buffer","deserializeMint","TokenAccountParser","deserializeAccount","keyToAccountParser","cache","query","address","toBase58","get","getAccountInfo","then","Error","add","set","obj","length","deserialize","registerParser","delete","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","push","addTransaction","signature","tx","addBulkTransactions","txs","getTransaction","getAllTransactions","clear","raiseCacheCleared","useAccountsContext","useContext","UseNativeAccount","useConnection","useWallet","useState","nativeAccount","setNativeAccount","updateCache","useCallback","wrapped","owner","amount","u64","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","wrapNativeAccount","undefined","useEffect","acc","onAccountChange","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","forEach","AccountsProvider","children","connected","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","selectUserAccounts","map","filter","subs","onCache","args","removeAccountChangeListener","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","removeProgramAccountChangeListener","Provider","getMultipleAccounts","all","chunks","chunk","getMultipleAccountsCore","array","rest","_","flat","_buildArgs","_rpcRequest","unsafeRes","message","useMint","setMint","catch","dispose","decode","fromBuffer","delegateOption","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","supply","freezeAuthorityOption","freezeAuthority","MINT_TO_MARKET","ENDPOINTS","endpoint","chainID","ChainID","MainnetBeta","clusterApiUrl","Testnet","Devnet","DEFAULT","ConnectionContext","setEndpoint","slippage","setSlippage","val","Connection","sendConnection","tokens","tokenMap","useConnectionConfig","OrderBookParser","decoded","Orderbook","LAYOUT","DEFAULT_DEX_ID","DexMarketParser","market","MARKETS","m","equals","Market","getLayout","details","baseMint","quoteMint","bids","asks","MarketsContext","marketEmitter","MarketProvider","accountsToObserve","useMemo","marketMints","setMarketMints","useUserAccounts","marketByMint","values","reduce","mintAddress","SERUM_TOKEN","TOKEN_MINTS","marketAddress","marketInfo","deprecated","timer","updateData","refreshAccounts","raiseMarketUpdated","window","initalQuery","reverseSerumMarketCache","allMarkets","item","index","toQuery","clearTimeout","midPriceInUSD","getMidPrice","subscribeToMarket","bid","ask","precacheMarkets","mints","newMints","STABLE_COINS","decodedMarket","baseMintDecimals","decimals","quoteMintDecimals","bidsBook","asksBook","bestBid","getL2","bestAsk","bbo","accountFlags","slab","Navbar","useLocation","anchorEl","setAnchorEl","open","Boolean","handleClose","useLayoutEffect","updateSize","innerWidth","document","getElementsByClassName","innerHTML","screen","width","addEventListener","removeEventListener","Box","sx","flexGrow","AppBar","position","color","Toolbar","marginTop","paddingLeft","Typography","variant","component","className","to","src","height","alt","container","justifyContent","spacing","Link","style","fontFamily","fontWeight","fontSize","textAlign","textDecoration","lineHeight","cursor","icon","marginRight","marginLeft","padding","IconButton","size","edge","mr","onClick","event","currentTarget","onClose","MenuItem","AppLayout","memo","Grid","CounterText","styled","MintContainer","div","MintButton","Button","borderRadius","backgroundColor","marginBottom","boxShadow","renderCounter","days","hours","minutes","seconds","completed","Mint","props","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","severity","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","balance","LAMPORTS_PER_SOL","signAllTransactions","signTransaction","alignItems","xs","date","toString","onMount","onComplete","renderer","disabled","CircularProgress","Snackbar","autoHideDuration","Alert","process","startDateSeed","parseInt","MintBox","md","lg","margin","parse","background","Process","Avatar","bgcolor","letterSpacing","Team","fontStyle","href","textDecorationLine","Exchange","paddingRight","HomeView","Container","TreeView","AppRoutes","wallets","getPhantomWallet","getSolflareWallet","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","network","WalletAdapterNetwork","basename","ConnectionProvider","WalletProvider","path","element","require","App","ReactDOM","render","StrictMode","getElementById","TEN","BN","pow","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","useLocalStorageState","defaultState","storedState","localStorage","getItem","JSON","setState","setLocalStorageState","newState","removeItem","setItem","stringify","shortenAddress","chars","slice","getTokenName","shorten","knownSymbol","symbol","substring","Array","apply","Math","ceil","fromLamports","rate","floor","isBN","precision","currency"],"mappings":"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","file":"static/js/main.0f4eee42.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\r\n\r\nexport const WRAPPED_SOL_MINT = new PublicKey(\r\n  \"So11111111111111111111111111111111111111112\"\r\n);\r\nexport let TOKEN_PROGRAM_ID = new PublicKey(\r\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n);\r\n\r\nexport let LENDING_PROGRAM_ID = new PublicKey(\r\n  \"TokenLending1111111111111111111111111111111\"\r\n);\r\n\r\nexport let SWAP_PROGRAM_ID = new PublicKey(\r\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\"\r\n);\r\n\r\nexport const PROGRAM_IDS = [\r\n  {\r\n    name: \"mainnet-beta\",\r\n  },\r\n  {\r\n    name: \"testnet\",\r\n  },\r\n  {\r\n    name: \"devnet\",\r\n  },\r\n  {\r\n    name: \"localnet\",\r\n  },\r\n];\r\n\r\nexport const setProgramIds = (envName: string) => {\r\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\r\n  if (!instance) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const programIds = () => {\r\n  return {\r\n    token: TOKEN_PROGRAM_ID,\r\n  };\r\n};\r\n","import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void | any> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void | any = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl as anchor.Idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate ? state.data.goLiveDate.toNumber() : '11/27/2021';\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  console.log({\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  })\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","import { EventEmitter as Emitter } from \"eventemitter3\";\r\n\r\nexport class CacheUpdateEvent {\r\n  static type = \"CacheUpdate\";\r\n  id: string;\r\n  parser: any;\r\n  isNew: boolean;\r\n  constructor(id: string, isNew: boolean, parser: any) {\r\n    this.id = id;\r\n    this.parser = parser;\r\n    this.isNew = isNew;\r\n  }\r\n}\r\n\r\nexport class CacheDeleteEvent {\r\n  static type = \"CacheUpdate\";\r\n  id: string;\r\n  constructor(id: string) {\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class MarketUpdateEvent {\r\n  static type = \"MarketUpdate\";\r\n  ids: Set<string>;\r\n  constructor(ids: Set<string>) {\r\n    this.ids = ids;\r\n  }\r\n}\r\n\r\nexport class CacheClearEvent {\r\n  static type = \"CacheDelete\";\r\n}\r\n\r\nexport class EventEmitter {\r\n  private emitter = new Emitter();\r\n\r\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\r\n    this.emitter.on(MarketUpdateEvent.type, callback);\r\n\r\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\r\n  }\r\n\r\n  onCache(callback: (args: CacheUpdateEvent) => void) {\r\n    this.emitter.on(CacheUpdateEvent.type, callback);\r\n\r\n    return () => this.emitter.removeListener(CacheUpdateEvent.type, callback);\r\n  }\r\n\r\n  raiseMarketUpdated(ids: Set<string>) {\r\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\r\n  }\r\n\r\n  raiseCacheUpdated(id: string, isNew: boolean, parser: any) {\r\n    this.emitter.emit(\r\n      CacheUpdateEvent.type,\r\n      new CacheUpdateEvent(id, isNew, parser)\r\n    );\r\n  }\r\n\r\n  raiseCacheDeleted(id: string) {\r\n    this.emitter.emit(CacheDeleteEvent.type, new CacheDeleteEvent(id));\r\n  }\r\n\r\n  raiseCacheCleared() {\r\n    this.emitter.emit(CacheClearEvent.type, new CacheClearEvent());\r\n  }\r\n}\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { useConnection } from'@solana/wallet-adapter-react'\r\nimport {\r\n  AccountInfo,\r\n  ConfirmedSignatureInfo,\r\n  ConfirmedTransaction,\r\n  Connection,\r\n  PublicKey,\r\n} from \"@solana/web3.js\";\r\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\r\nimport { TokenAccount } from \"./../models\";\r\nimport { chunks } from \"./../utils/utils\";\r\nimport { EventEmitter } from \"./../utils/eventEmitter\";\r\nimport { useUserAccounts } from \"../hooks/useUserAccounts\";\r\nimport { WRAPPED_SOL_MINT, programIds } from \"../utils/ids\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nconst AccountsContext = React.createContext<any>(null);\r\n\r\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\r\nconst genericCache = new Map<string, ParsedAccountBase>();\r\nconst transactionCache = new Map<string, ParsedLocalTransaction | null>();\r\n\r\nexport interface ParsedLocalTransaction {\r\n  transactionType: number;\r\n  signature: ConfirmedSignatureInfo;\r\n  confirmedTx: ConfirmedTransaction | null;\r\n}\r\n\r\nexport interface ParsedAccountBase {\r\n  pubkey: PublicKey;\r\n  account: AccountInfo<Buffer>;\r\n  info: any; // TODO: change to unkown\r\n}\r\n\r\nexport type AccountParser = (\r\n  pubkey: PublicKey,\r\n  data: AccountInfo<Buffer>\r\n) => ParsedAccountBase | undefined;\r\n\r\nexport interface ParsedAccount<T> extends ParsedAccountBase {\r\n  info: T;\r\n}\r\n\r\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\r\n  const buffer = Buffer.from(info.data);\r\n\r\n  const data = deserializeMint(buffer);\r\n\r\n  const details = {\r\n    pubkey: pubKey,\r\n    account: {\r\n      ...info,\r\n    },\r\n    info: data,\r\n  } as ParsedAccountBase;\r\n\r\n  return details;\r\n};\r\n\r\nexport const TokenAccountParser = (\r\n  pubKey: PublicKey,\r\n  info: AccountInfo<Buffer>\r\n) => {\r\n  const buffer = Buffer.from(info.data);\r\n  const data = deserializeAccount(buffer);\r\n\r\n  const details = {\r\n    pubkey: pubKey,\r\n    account: {\r\n      ...info,\r\n    },\r\n    info: data,\r\n  } as TokenAccount;\r\n\r\n  return details;\r\n};\r\n\r\nexport const GenericAccountParser = (\r\n  pubKey: PublicKey,\r\n  info: AccountInfo<Buffer>\r\n) => {\r\n  const buffer = Buffer.from(info.data);\r\n\r\n  const details = {\r\n    pubkey: pubKey,\r\n    account: {\r\n      ...info,\r\n    },\r\n    info: buffer,\r\n  } as ParsedAccountBase;\r\n\r\n  return details;\r\n};\r\n\r\nexport const keyToAccountParser = new Map<string, AccountParser>();\r\n\r\nexport const cache = {\r\n  emitter: new EventEmitter(),\r\n  query: async (\r\n    connection: Connection,\r\n    pubKey: string | PublicKey,\r\n    parser?: AccountParser\r\n  ) => {\r\n    let id: PublicKey;\r\n    if (typeof pubKey === \"string\") {\r\n      id = new PublicKey(pubKey);\r\n    } else {\r\n      id = pubKey;\r\n    }\r\n\r\n    const address = id.toBase58();\r\n\r\n    let account = genericCache.get(address);\r\n    if (account) {\r\n      return account;\r\n    }\r\n\r\n    let query = pendingCalls.get(address);\r\n    if (query) {\r\n      return query;\r\n    }\r\n\r\n    // TODO: refactor to use multiple accounts query with flush like behavior\r\n    query = connection.getAccountInfo(id).then((data) => {\r\n      if (!data) {\r\n        throw new Error(\"Account not found\");\r\n      }\r\n\r\n      return cache.add(id, data, parser);\r\n    }) as Promise<TokenAccount>;\r\n    pendingCalls.set(address, query as any);\r\n\r\n    return query;\r\n  },\r\n  add: (\r\n    id: PublicKey | string,\r\n    obj: AccountInfo<Buffer>,\r\n    parser?: AccountParser\r\n  ) => {\r\n    if (obj.data.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const address = typeof id === \"string\" ? id : id?.toBase58();\r\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\r\n    if (!deserialize) {\r\n      throw new Error(\r\n        \"Deserializer needs to be registered or passed as a parameter\"\r\n      );\r\n    }\r\n\r\n    cache.registerParser(id, deserialize);\r\n    pendingCalls.delete(address);\r\n    let account; try { account = deserialize(new PublicKey(address), obj); } catch(e) { console.error(e); }\r\n    if (!account) {\r\n      return;\r\n    }\r\n\r\n    const isNew = !genericCache.has(address);\r\n\r\n    genericCache.set(address, account);\r\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize);\r\n    return account;\r\n  },\r\n  get: (pubKey: string | PublicKey) => {\r\n    let key: string;\r\n    if (typeof pubKey !== \"string\") {\r\n      key = pubKey.toBase58();\r\n    } else {\r\n      key = pubKey;\r\n    }\r\n\r\n    return genericCache.get(key);\r\n  },\r\n  delete: (pubKey: string | PublicKey) => {\r\n    let key: string;\r\n    if (typeof pubKey !== \"string\") {\r\n      key = pubKey.toBase58();\r\n    } else {\r\n      key = pubKey;\r\n    }\r\n\r\n    if (genericCache.get(key)) {\r\n      genericCache.delete(key);\r\n      cache.emitter.raiseCacheDeleted(key);\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n\r\n  byParser: (parser: AccountParser) => {\r\n    const result: string[] = [];\r\n    for (const id of keyToAccountParser.keys()) {\r\n      if (keyToAccountParser.get(id) === parser) {\r\n        result.push(id);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  },\r\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\r\n    if (pubkey) {\r\n      const address = typeof pubkey === \"string\" ? pubkey : pubkey?.toBase58();\r\n      keyToAccountParser.set(address, parser);\r\n    }\r\n\r\n    return pubkey;\r\n  },\r\n  addTransaction: (signature: string, tx: ParsedLocalTransaction | null) => {\r\n    transactionCache.set(signature, tx);\r\n    return tx;\r\n  },\r\n  addBulkTransactions: (txs: Array<ParsedLocalTransaction>) => {\r\n    for (const tx of txs) {\r\n      transactionCache.set(tx.signature.signature, tx);\r\n    }\r\n    return txs;\r\n  },\r\n  getTransaction: (signature: string) => {\r\n    const transaction = transactionCache.get(signature);\r\n    return transaction;\r\n  },\r\n  getAllTransactions: () => {\r\n    return transactionCache;\r\n  },\r\n  clear: () => {\r\n    genericCache.clear();\r\n    transactionCache.clear();\r\n    cache.emitter.raiseCacheCleared();\r\n  },\r\n};\r\n\r\nexport const useAccountsContext = () => {\r\n  const context = useContext(AccountsContext);\r\n\r\n  return context;\r\n};\r\n\r\nfunction wrapNativeAccount(\r\n  pubkey: PublicKey,\r\n  account?: AccountInfo<Buffer>\r\n): TokenAccount | undefined {\r\n  if (!account) {\r\n    return undefined;\r\n  }\r\n\r\n  return {\r\n    pubkey: pubkey,\r\n    account,\r\n    info: {\r\n      address: pubkey,\r\n      mint: WRAPPED_SOL_MINT,\r\n      owner: pubkey,\r\n      amount: new u64(account.lamports),\r\n      delegate: null,\r\n      delegatedAmount: new u64(0),\r\n      isInitialized: true,\r\n      isFrozen: false,\r\n      isNative: true,\r\n      rentExemptReserve: null,\r\n      closeAuthority: null,\r\n    },\r\n  };\r\n}\r\n\r\nconst UseNativeAccount = () => {\r\n  const connection = useConnection();\r\n  const { wallet, publicKey } = useWallet();\r\n\r\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\r\n\r\n  const updateCache = useCallback(\r\n    (account) => {\r\n      if (!connection || !publicKey) {\r\n        return;\r\n      }\r\n\r\n      const wrapped = wrapNativeAccount(publicKey, account);\r\n      if (wrapped !== undefined) {\r\n        const id = publicKey.toBase58();\r\n        cache.registerParser(id, TokenAccountParser);\r\n        genericCache.set(id, wrapped as TokenAccount);\r\n        cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser);\r\n      }\r\n    },\r\n    [publicKey, connection]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!connection || !publicKey) {\r\n      return;\r\n    }\r\n\r\n    connection.connection.getAccountInfo(publicKey).then((acc) => {\r\n      if (acc) {\r\n        updateCache(acc);\r\n        setNativeAccount(acc);\r\n      }\r\n    });\r\n    connection.connection.onAccountChange(publicKey, (acc) => {\r\n      if (acc) {\r\n        updateCache(acc);\r\n        setNativeAccount(acc);\r\n      }\r\n    });\r\n  }, [setNativeAccount, wallet, publicKey, connection, updateCache]);\r\n\r\n  return { nativeAccount };\r\n};\r\n\r\nconst PRECACHED_OWNERS = new Set<string>();\r\nconst precacheUserTokenAccounts = async (\r\n  connection: Connection,\r\n  owner?: PublicKey\r\n) => {\r\n  if (!owner) {\r\n    return;\r\n  }\r\n\r\n  // used for filtering account updates over websocket\r\n  PRECACHED_OWNERS.add(owner.toBase58());\r\n\r\n  // user accounts are update via ws subscription\r\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\r\n    programId: programIds().token,\r\n  });\r\n  accounts.value.forEach((info) => {\r\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\r\n  });\r\n};\r\n\r\nexport function AccountsProvider({ children = null as any }) {\r\n  const connection = useConnection();\r\n  const { publicKey, wallet, connected } = useWallet();\r\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\r\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\r\n  const { nativeAccount } = UseNativeAccount();\r\n\r\n  const selectUserAccounts = useCallback(() => {\r\n    if (!publicKey) {\r\n      return [];\r\n    }\r\n\r\n    const address = publicKey.toBase58();\r\n\r\n    return cache\r\n      .byParser(TokenAccountParser)\r\n      .map((id) => cache.get(id))\r\n      .filter((a) => a && a.info.owner.toBase58() === address)\r\n      .map((a) => a as TokenAccount);\r\n  }, [publicKey]);\r\n\r\n  useEffect(() => {\r\n    const accounts = selectUserAccounts().filter(\r\n      (a) => a !== undefined\r\n    ) as TokenAccount[];\r\n    setUserAccounts(accounts);\r\n  }, [nativeAccount, wallet, tokenAccounts, selectUserAccounts]);\r\n\r\n  useEffect(() => {\r\n    const subs: number[] = [];\r\n    cache.emitter.onCache((args) => {\r\n      if (args.isNew) {\r\n        let id = args.id;\r\n        let deserialize = args.parser;\r\n        connection.connection.onAccountChange(new PublicKey(id), (info) => {\r\n          cache.add(id, info, deserialize);\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subs.forEach((id) => connection.connection.removeAccountChangeListener(id));\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    if (!connection || !publicKey) {\r\n      setTokenAccounts([]);\r\n    } else {\r\n      precacheUserTokenAccounts(connection.connection, publicKey).then(() => {\r\n        setTokenAccounts(selectUserAccounts());\r\n      });\r\n\r\n      // This can return different types of accounts: token-account, mint, multisig\r\n      // TODO: web3.js expose ability to filter.\r\n      // this should use only filter syntax to only get accounts that are owned by user\r\n      const tokenSubID = connection.connection.onProgramAccountChange(\r\n        programIds().token,\r\n        (info) => {\r\n          // TODO: fix type in web3.js\r\n          const id = (info.accountId as unknown) as string;\r\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\r\n          if (info.accountInfo.data.length === AccountLayout.span) {\r\n            const data = deserializeAccount(info.accountInfo.data);\r\n\r\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\r\n              cache.add(id, info.accountInfo, TokenAccountParser);\r\n              setTokenAccounts(selectUserAccounts());\r\n            }\r\n          }\r\n        },\r\n        \"singleGossip\"\r\n      );\r\n\r\n      return () => {\r\n        connection.connection.removeProgramAccountChangeListener(tokenSubID);\r\n      };\r\n    }\r\n  }, [connection, connected, publicKey, selectUserAccounts]);\r\n\r\n  return (\r\n    <AccountsContext.Provider\r\n      value={{\r\n        userAccounts,\r\n        nativeAccount,\r\n      }}\r\n    >\r\n      {children}\r\n    </AccountsContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNativeAccount() {\r\n  const context = useContext(AccountsContext);\r\n  return {\r\n    account: context.nativeAccount as AccountInfo<Buffer>,\r\n  };\r\n}\r\n\r\nexport const getMultipleAccounts = async (\r\n  connection: any,\r\n  keys: string[],\r\n  commitment: string\r\n) => {\r\n  const result = await Promise.all(\r\n    chunks(keys, 99).map((chunk) =>\r\n      getMultipleAccountsCore(connection, chunk, commitment)\r\n    )\r\n  );\r\n\r\n  const array = result\r\n    .map(\r\n      (a) =>\r\n        a.array\r\n          .map((acc) => {\r\n            if (!acc) {\r\n              return undefined;\r\n            }\r\n\r\n            const { data, ...rest } = acc;\r\n            const obj = {\r\n              ...rest,\r\n              data: Buffer.from(data[0], \"base64\"),\r\n            } as AccountInfo<Buffer>;\r\n            return obj;\r\n          })\r\n          .filter((_) => _) as AccountInfo<Buffer>[]\r\n    )\r\n    .flat();\r\n  return { keys, array };\r\n};\r\n\r\nconst getMultipleAccountsCore = async (\r\n  connection: any,\r\n  keys: string[],\r\n  commitment: string\r\n) => {\r\n  const args = connection._buildArgs([keys], commitment, \"base64\");\r\n\r\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\r\n  if (unsafeRes.error) {\r\n    throw new Error(\r\n      \"failed to get info about account \" + unsafeRes.error.message\r\n    );\r\n  }\r\n\r\n  if (unsafeRes.result.value) {\r\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\r\n    return { keys, array };\r\n  }\r\n\r\n  // TODO: fix\r\n  throw new Error();\r\n};\r\n\r\nexport function useMint(key?: string | PublicKey) {\r\n  const connection = useConnection();\r\n  const [mint, setMint] = useState<MintInfo>();\r\n\r\n  const id = typeof key === \"string\" ? key : key?.toBase58();\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    cache\r\n      .query(connection.connection, id, MintParser)\r\n      .then((acc) => setMint(acc.info as any))\r\n      .catch((err) => console.log(err));\r\n\r\n    const dispose = cache.emitter.onCache((e) => {\r\n      const event = e;\r\n      if (event.id === id) {\r\n        cache\r\n          .query(connection.connection, id, MintParser)\r\n          .then((mint) => setMint(mint.info as any));\r\n      }\r\n    });\r\n    return () => {\r\n      dispose();\r\n    };\r\n  }, [connection, id]);\r\n\r\n  return mint;\r\n}\r\n\r\nexport const useAccountByMint = (mint: string) => {\r\n  const { userAccounts } = useUserAccounts();\r\n  const index = userAccounts.findIndex(\r\n    (acc) => acc.info.mint.toBase58() === mint\r\n  );\r\n\r\n  if (index !== -1) {\r\n    return userAccounts[index];\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nexport function useAccount(pubKey?: PublicKey) {\r\n  const connection = useConnection();\r\n  const [account, setAccount] = useState<TokenAccount>();\r\n\r\n  const key = pubKey?.toBase58();\r\n  useEffect(() => {\r\n    const query = async () => {\r\n      try {\r\n        if (!key) {\r\n          return;\r\n        }\r\n\r\n        const acc = await cache\r\n          .query(connection.connection, key, TokenAccountParser)\r\n          .catch((err) => console.log(err));\r\n        if (acc) {\r\n          setAccount(acc);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    query();\r\n\r\n    const dispose = cache.emitter.onCache((e) => {\r\n      const event = e;\r\n      if (event.id === key) {\r\n        query();\r\n      }\r\n    });\r\n    return () => {\r\n      dispose();\r\n    };\r\n  }, [connection, key]);\r\n\r\n  return account;\r\n}\r\n\r\n// TODO: expose in spl package\r\nconst deserializeAccount = (data: Buffer) => {\r\n  const accountInfo = AccountLayout.decode(data);\r\n  accountInfo.mint = new PublicKey(accountInfo.mint);\r\n  accountInfo.owner = new PublicKey(accountInfo.owner);\r\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\r\n\r\n  if (accountInfo.delegateOption === 0) {\r\n    accountInfo.delegate = null;\r\n    accountInfo.delegatedAmount = new u64(0);\r\n  } else {\r\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\r\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\r\n  }\r\n\r\n  accountInfo.isInitialized = accountInfo.state !== 0;\r\n  accountInfo.isFrozen = accountInfo.state === 2;\r\n\r\n  if (accountInfo.isNativeOption === 1) {\r\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\r\n    accountInfo.isNative = true;\r\n  } else {\r\n    accountInfo.rentExemptReserve = null;\r\n    accountInfo.isNative = false;\r\n  }\r\n\r\n  if (accountInfo.closeAuthorityOption === 0) {\r\n    accountInfo.closeAuthority = null;\r\n  } else {\r\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\r\n  }\r\n\r\n  return accountInfo;\r\n};\r\n\r\n// TODO: expose in spl package\r\nconst deserializeMint = (data: Buffer) => {\r\n  if (data.length !== MintLayout.span) {\r\n    throw new Error(\"Not a valid Mint\");\r\n  }\r\n\r\n  const mintInfo = MintLayout.decode(data);\r\n\r\n  if (mintInfo.mintAuthorityOption === 0) {\r\n    mintInfo.mintAuthority = null;\r\n  } else {\r\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\r\n  }\r\n\r\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\r\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\r\n\r\n  if (mintInfo.freezeAuthorityOption === 0) {\r\n    mintInfo.freezeAuthority = null;\r\n  } else {\r\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\r\n  }\r\n\r\n  return mintInfo as MintInfo;\r\n};\r\n","// use to override serum market to use specifc mint\r\nexport const MINT_TO_MARKET: { [key: string]: string } = {};\r\n","import { useLocalStorageState } from \"./../utils/utils\";\r\nimport {\r\n  Keypair,\r\n  clusterApiUrl,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { notify } from \"./../utils/notifications\";\r\nimport { ExplorerLink } from \"../components/ExplorerLink\";\r\nimport { setProgramIds } from \"../utils/ids\";\r\nimport { cache, getMultipleAccounts, MintParser } from \"./accounts\";\r\nimport { TokenListProvider, ENV as ChainID, TokenInfo } from \"@solana/spl-token-registry\";\r\nimport { WalletAdapter, SignerWalletAdapter } from \"@solana/wallet-adapter-base\";\r\n\r\nexport type ENV =\r\n  | \"mainnet-beta\"\r\n  | \"testnet\"\r\n  | \"devnet\"\r\n  | \"localnet\";\r\n\r\nexport const ENDPOINTS = [\r\n  {\r\n    name: \"mainnet-beta\" as ENV,\r\n    endpoint: \"https://solana-api.projectserum.com/\",\r\n    chainID: ChainID.MainnetBeta,\r\n  },\r\n  {\r\n    name: \"testnet\" as ENV,\r\n    endpoint: clusterApiUrl(\"testnet\"),\r\n    chainID: ChainID.Testnet,\r\n  },\r\n  {\r\n    name: \"devnet\" as ENV,\r\n    endpoint: clusterApiUrl(\"devnet\"),\r\n    chainID: ChainID.Devnet,\r\n  },\r\n  {\r\n    name: \"localnet\" as ENV,\r\n    endpoint: \"http://127.0.0.1:8899\",\r\n    chainID: ChainID.Devnet,\r\n  },\r\n];\r\n\r\nconst DEFAULT = ENDPOINTS[0].endpoint;\r\nconst DEFAULT_SLIPPAGE = 0.25;\r\n\r\ninterface ConnectionConfig {\r\n  connection: Connection;\r\n  sendConnection: Connection;\r\n  endpoint: string;\r\n  slippage: number;\r\n  setSlippage: (val: number) => void;\r\n  env: ENV;\r\n  setEndpoint: (val: string) => void;\r\n  tokens: TokenInfo[];\r\n  tokenMap: Map<string, TokenInfo>;\r\n}\r\n\r\nconst ConnectionContext = React.createContext<ConnectionConfig>({\r\n  endpoint: DEFAULT,\r\n  setEndpoint: () => {},\r\n  slippage: DEFAULT_SLIPPAGE,\r\n  setSlippage: (val: number) => {},\r\n  connection: new Connection(DEFAULT, \"recent\"),\r\n  sendConnection: new Connection(DEFAULT, \"recent\"),\r\n  env: ENDPOINTS[0].name,\r\n  tokens: [],\r\n  tokenMap: new Map<string, TokenInfo>(),\r\n});\r\n\r\nexport function ConnectionProvider({ children = undefined as any }) {\r\n  const [endpoint, setEndpoint] = useLocalStorageState(\r\n    \"connectionEndpts\",\r\n    ENDPOINTS[0].endpoint\r\n  );\r\n\r\n  const [slippage, setSlippage] = useLocalStorageState(\r\n    \"slippage\",\r\n    DEFAULT_SLIPPAGE.toString()\r\n  );\r\n\r\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\r\n    endpoint,\r\n  ]);\r\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\r\n    endpoint,\r\n  ]);\r\n\r\n  const chain =\r\n    ENDPOINTS.find((end) => end.endpoint === endpoint) || ENDPOINTS[0];\r\n  const env = chain.name;\r\n\r\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\r\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\r\n  useEffect(() => {\r\n    cache.clear();\r\n    // fetch token files\r\n    (async () => {\r\n      const res = await new TokenListProvider().resolve();\r\n      const list = res\r\n        .filterByChainId(chain.chainID)\r\n        .excludeByTag(\"nft\")\r\n        .getList();\r\n      const knownMints = list.reduce((map, item) => {\r\n        map.set(item.address, item);\r\n        return map;\r\n      }, new Map<string, TokenInfo>());\r\n\r\n      const accounts = await getMultipleAccounts(connection, [...knownMints.keys()], 'single');\r\n      accounts.keys.forEach((key, index) => {\r\n        const account = accounts.array[index];\r\n        if(!account) {\r\n          return;\r\n        }\r\n\r\n        cache.add(new PublicKey(key), account, MintParser);\r\n      })\r\n\r\n      setTokenMap(knownMints);\r\n      setTokens(list);\r\n    })();\r\n  }, [connection, chain]);\r\n\r\n  setProgramIds(env);\r\n\r\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\r\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\r\n  // This is a hack to prevent the list from every getting empty\r\n  useEffect(() => {\r\n    const id = connection.onAccountChange(new Keypair().publicKey, () => {});\r\n    return () => {\r\n      connection.removeAccountChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = connection.onSlotChange(() => null);\r\n    return () => {\r\n      connection.removeSlotChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onAccountChange(\r\n      new Keypair().publicKey,\r\n      () => {}\r\n    );\r\n    return () => {\r\n      sendConnection.removeAccountChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  useEffect(() => {\r\n    const id = sendConnection.onSlotChange(() => null);\r\n    return () => {\r\n      sendConnection.removeSlotChangeListener(id);\r\n    };\r\n  }, [sendConnection]);\r\n\r\n  return (\r\n    <ConnectionContext.Provider\r\n      value={{\r\n        endpoint,\r\n        setEndpoint,\r\n        slippage: parseFloat(slippage),\r\n        setSlippage: (val) => setSlippage(val.toString()),\r\n        connection,\r\n        sendConnection,\r\n        tokens,\r\n        tokenMap,\r\n        env,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useConnection() {\r\n  return useContext(ConnectionContext).connection as Connection;\r\n}\r\n\r\nexport function useSendConnection() {\r\n  return useContext(ConnectionContext)?.sendConnection;\r\n}\r\n\r\nexport function useConnectionConfig() {\r\n  const context = useContext(ConnectionContext);\r\n  return {\r\n    endpoint: context.endpoint,\r\n    setEndpoint: context.setEndpoint,\r\n    env: context.env,\r\n    tokens: context.tokens,\r\n    tokenMap: context.tokenMap,\r\n  };\r\n}\r\n\r\nexport function useSlippageConfig() {\r\n  const { slippage, setSlippage } = useContext(ConnectionContext);\r\n  return { slippage, setSlippage };\r\n}\r\n\r\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: WalletAdapter,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true\r\n) => {\r\n  if (!wallet?.publicKey) {\r\n    throw new Error(\"Wallet is not connected\");\r\n  }\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    await connection.getRecentBlockhash(\"max\")\r\n  ).blockhash;\r\n  transaction.setSigners(\r\n    // fee payied by the wallet owner\r\n    wallet.publicKey,\r\n    ...signers.map((s) => s.publicKey)\r\n  );\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  let txSignature;\r\n  txSignature = await wallet.sendTransaction(transaction,connection);\r\n//   const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment: \"singleGossip\",\r\n  };\r\n\r\n//   const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n\r\n  if (awaitConfirmation) {\r\n    const status = (\r\n      await connection.confirmTransaction(\r\n        txSignature,\r\n        options && (options.commitment as any)\r\n      )\r\n    ).value;\r\n\r\n    if (status?.err) {\r\n      const errors = await getErrorForTransaction(connection, txSignature);\r\n      notify({\r\n        message: \"Transaction failed...\",\r\n        description: (\r\n          <>\r\n            {errors.map((err) => (\r\n              <div>{err}</div>\r\n            ))}\r\n            <ExplorerLink address={txSignature} type=\"transaction\" />\r\n          </>\r\n        ),\r\n        type: \"error\",\r\n      });\r\n\r\n      throw new Error(\r\n        `Raw transaction ${txSignature} failed (${JSON.stringify(status)})`\r\n      );\r\n    }\r\n  }\r\n\r\n  return txSignature;\r\n};","import { Market, MARKETS, Orderbook } from \"@project-serum/serum\";\r\nimport { AccountInfo, PublicKey } from \"@solana/web3.js\";\r\nimport {\r\n  MintParser,\r\n  ParsedAccountBase,\r\n  cache,\r\n} from \"./../../contexts/accounts\";\r\n\r\nexport const OrderBookParser = (id: PublicKey, acc: AccountInfo<Buffer>) => {\r\n  const decoded = Orderbook.LAYOUT.decode(acc.data);\r\n\r\n  const details = {\r\n    pubkey: id,\r\n    account: {\r\n      ...acc,\r\n    },\r\n    info: decoded,\r\n  } as ParsedAccountBase;\r\n\r\n  return details;\r\n};\r\n\r\nconst DEFAULT_DEX_ID = new PublicKey(\r\n  \"EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o\"\r\n);\r\n\r\nexport const DexMarketParser = (\r\n  pubkey: PublicKey,\r\n  acc: AccountInfo<Buffer>\r\n) => {\r\n  const market = MARKETS.find((m) => m.address.equals(pubkey));\r\n  const decoded = Market.getLayout(market?.programId || DEFAULT_DEX_ID).decode(\r\n    acc.data\r\n  );\r\n\r\n  const details = {\r\n    pubkey,\r\n    account: {\r\n      ...acc,\r\n    },\r\n    info: decoded,\r\n  } as ParsedAccountBase;\r\n\r\n  cache.registerParser(details.info.baseMint, MintParser);\r\n  cache.registerParser(details.info.quoteMint, MintParser);\r\n  cache.registerParser(details.info.bids, OrderBookParser);\r\n  cache.registerParser(details.info.asks, OrderBookParser);\r\n\r\n  return details;\r\n};\r\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { MINT_TO_MARKET } from \"./../models/marketOverrides\";\r\nimport { STABLE_COINS } from \"./../utils/utils\";\r\nimport { useConnectionConfig } from \"./connection\";\r\nimport { cache, getMultipleAccounts } from \"./accounts\";\r\nimport { Market, MARKETS, Orderbook, TOKEN_MINTS } from \"@project-serum/serum\";\r\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { useMemo } from \"react\";\r\nimport { EventEmitter } from \"./../utils/eventEmitter\";\r\n\r\nimport { DexMarketParser } from \"./../models/dex\";\r\nimport { useUserAccounts } from \"../hooks\";\r\n\r\nexport const BONFIDA_POOL_INTERVAL = 30 * 60_000; // 30 min\r\n\r\ninterface RecentPoolData {\r\n  pool_identifier: string;\r\n  volume24hA: number;\r\n}\r\n\r\nexport interface MarketsContextState {\r\n  midPriceInUSD: (mint: string) => number;\r\n  marketEmitter: EventEmitter;\r\n  accountsToObserve: Map<string, number>;\r\n  marketByMint: Map<string, SerumMarket>;\r\n\r\n  subscribeToMarket: (mint: string) => () => void;\r\n\r\n  precacheMarkets: (mints: string[]) => void;\r\n}\r\n\r\nconst REFRESH_INTERVAL = 30_000;\r\n\r\nconst MarketsContext = React.createContext<MarketsContextState | null>(null);\r\n\r\nconst marketEmitter = new EventEmitter();\r\n\r\nexport function MarketProvider({ children = null as any }) {\r\n  const { endpoint } = useConnectionConfig();\r\n  const accountsToObserve = useMemo(() => new Map<string, number>(), []);\r\n  const [marketMints, setMarketMints] = useState<string[]>([]);\r\n  const { userAccounts } = useUserAccounts();\r\n\r\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\r\n    endpoint,\r\n  ]);\r\n\r\n  const marketByMint = useMemo(() => {\r\n    return [...new Set(marketMints).values()].reduce((acc, key) => {\r\n      const mintAddress = key;\r\n\r\n      const SERUM_TOKEN = TOKEN_MINTS.find(\r\n        (a) => a.address.toBase58() === mintAddress\r\n      );\r\n\r\n      const marketAddress = MINT_TO_MARKET[mintAddress];\r\n      const marketInfo = MARKETS.filter(m => !m.deprecated).find(\r\n        (m) => m.name === `${SERUM_TOKEN?.name}/USDC` || \r\n               m.name === `${SERUM_TOKEN?.name}/USDT` || \r\n               m.address.toBase58() === marketAddress\r\n      );\r\n\r\n      if (marketInfo) {\r\n        acc.set(mintAddress, {\r\n          marketInfo,\r\n        });\r\n      }\r\n\r\n      return acc;\r\n    }, new Map<string, SerumMarket>()) as Map<string, SerumMarket>;\r\n  }, [marketMints]);\r\n\r\n  useEffect(() => {\r\n    let timer = 0;\r\n\r\n    const updateData = async () => {\r\n      await refreshAccounts(connection, [...accountsToObserve.keys()]);\r\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\r\n\r\n      timer = window.setTimeout(() => updateData(), REFRESH_INTERVAL);\r\n    };\r\n\r\n    const initalQuery = async () => {\r\n      const reverseSerumMarketCache = new Map<string, string>();\r\n      [...marketByMint.keys()].forEach((mint) => {\r\n        const m = marketByMint.get(mint);\r\n        if (m) {\r\n          reverseSerumMarketCache.set(m.marketInfo.address.toBase58(), mint);\r\n        }\r\n      });\r\n\r\n      const allMarkets = [...marketByMint.values()].map((m) => {\r\n        return m.marketInfo.address.toBase58();\r\n      });\r\n\r\n      await getMultipleAccounts(\r\n        connection,\r\n        // only query for markets that are not in cahce\r\n        allMarkets.filter((a) => cache.get(a) === undefined),\r\n        \"single\"\r\n      ).then(({ keys, array }) => {\r\n        allMarkets.forEach(() => {});\r\n\r\n        return array.map((item, index) => {\r\n          const marketAddress = keys[index];\r\n          const mintAddress = reverseSerumMarketCache.get(marketAddress);\r\n          if (mintAddress) {\r\n            const market = marketByMint.get(mintAddress);\r\n\r\n            if (market) {\r\n              const id = market.marketInfo.address;\r\n              cache.add(id, item, DexMarketParser);\r\n            }\r\n          }\r\n\r\n          return item;\r\n        });\r\n      });\r\n\r\n      const toQuery = new Set<string>();\r\n      allMarkets.forEach((m) => {\r\n        const market = cache.get(m);\r\n        if (!market) {\r\n          return;\r\n        }\r\n\r\n        const decoded = market;\r\n\r\n        if (!cache.get(decoded.info.baseMint)) {\r\n          toQuery.add(decoded.info.baseMint.toBase58());\r\n        }\r\n\r\n        if (!cache.get(decoded.info.baseMint)) {\r\n          toQuery.add(decoded.info.quoteMint.toBase58());\r\n        }\r\n\r\n        toQuery.add(decoded.info.bids.toBase58());\r\n        toQuery.add(decoded.info.asks.toBase58());\r\n      });\r\n\r\n      await refreshAccounts(connection, [...toQuery.keys()]);\r\n\r\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\r\n\r\n      // start update loop\r\n      updateData();\r\n    };\r\n\r\n    initalQuery();\r\n\r\n    return () => {\r\n      window.clearTimeout(timer);\r\n    };\r\n  }, [marketByMint, accountsToObserve, connection]);\r\n\r\n  const midPriceInUSD = useCallback(\r\n    (mintAddress: string) => {\r\n      return getMidPrice(\r\n        marketByMint.get(mintAddress)?.marketInfo.address.toBase58(),\r\n        mintAddress\r\n      );\r\n    },\r\n    [marketByMint]\r\n  );\r\n\r\n  const subscribeToMarket = useCallback(\r\n    (mintAddress: string) => {\r\n      const info = marketByMint.get(mintAddress);\r\n      const market = cache.get(info?.marketInfo.address.toBase58() || \"\");\r\n      if (!market) {\r\n        return () => {};\r\n      }\r\n\r\n      // TODO: get recent volume\r\n\r\n      const bid = market.info.bids.toBase58();\r\n      const ask = market.info.asks.toBase58();\r\n      accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) + 1);\r\n      accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) + 1);\r\n\r\n      // TODO: add event queue to query for last trade\r\n\r\n      return () => {\r\n        accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) - 1);\r\n        accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) - 1);\r\n\r\n        // cleanup\r\n        [...accountsToObserve.keys()].forEach((key) => {\r\n          if ((accountsToObserve.get(key) || 0) <= 0) {\r\n            accountsToObserve.delete(key);\r\n          }\r\n        });\r\n      };\r\n    },\r\n    [marketByMint, accountsToObserve]\r\n  );\r\n\r\n  const precacheMarkets = useCallback(\r\n    (mints: string[]) => {\r\n      const newMints = [...new Set([...marketMints, ...mints]).values()];\r\n\r\n      if (marketMints.length !== newMints.length) {\r\n        setMarketMints(newMints);\r\n      }\r\n    },\r\n    [setMarketMints, marketMints]\r\n  );\r\n\r\n  useEffect(() => {\r\n    precacheMarkets(userAccounts.map(a => a.info.mint.toBase58()));\r\n  }, [userAccounts, precacheMarkets]);\r\n\r\n  return (\r\n    <MarketsContext.Provider\r\n      value={{\r\n        midPriceInUSD,\r\n        marketEmitter,\r\n        accountsToObserve,\r\n        marketByMint,\r\n        subscribeToMarket,\r\n        precacheMarkets,\r\n      }}\r\n    >\r\n      {children}\r\n    </MarketsContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useMarkets = () => {\r\n  const context = useContext(MarketsContext);\r\n  return context as MarketsContextState;\r\n};\r\n\r\nexport const useMidPriceInUSD = (mint: string) => {\r\n  const { midPriceInUSD, subscribeToMarket, marketEmitter } = useContext(\r\n    MarketsContext\r\n  ) as MarketsContextState;\r\n  const [price, setPrice] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let subscription = subscribeToMarket(mint);\r\n    const update = () => {\r\n      if (midPriceInUSD) {\r\n        setPrice(midPriceInUSD(mint));\r\n      }\r\n    };\r\n\r\n    update();\r\n    const dispose = marketEmitter.onMarket(update);\r\n\r\n    return () => {\r\n      subscription();\r\n      dispose();\r\n    };\r\n  }, [midPriceInUSD, mint, marketEmitter, subscribeToMarket]);\r\n\r\n  return { price, isBase: price === 1.0 };\r\n};\r\n\r\nexport const usePrecacheMarket = () => {\r\n  const context = useMarkets();\r\n  return context.precacheMarkets;\r\n};\r\n\r\nconst bbo = (bidsBook: Orderbook, asksBook: Orderbook) => {\r\n  const bestBid = bidsBook.getL2(1);\r\n  const bestAsk = asksBook.getL2(1);\r\n\r\n  if (bestBid.length > 0 && bestAsk.length > 0) {\r\n    return (bestBid[0][0] + bestAsk[0][0]) / 2.0;\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\nconst getMidPrice = (marketAddress?: string, mintAddress?: string) => {\r\n  const SERUM_TOKEN = TOKEN_MINTS.find(\r\n    (a) => a.address.toBase58() === mintAddress\r\n  );\r\n\r\n  if (STABLE_COINS.has(SERUM_TOKEN?.name || \"\")) {\r\n    return 1.0;\r\n  }\r\n\r\n  if (!marketAddress) {\r\n    return 0.0;\r\n  }\r\n\r\n  const marketInfo = cache.get(marketAddress);\r\n  if (!marketInfo) {\r\n    return 0.0;\r\n  }\r\n\r\n  const decodedMarket = marketInfo.info;\r\n\r\n  const baseMintDecimals =\r\n    cache.get(decodedMarket.baseMint)?.info.decimals || 0;\r\n  const quoteMintDecimals =\r\n    cache.get(decodedMarket.quoteMint)?.info.decimals || 0;\r\n\r\n  const market = new Market(\r\n    decodedMarket,\r\n    baseMintDecimals,\r\n    quoteMintDecimals,\r\n    undefined,\r\n    decodedMarket.programId\r\n  );\r\n\r\n  const bids = cache.get(decodedMarket.bids)?.info;\r\n  const asks = cache.get(decodedMarket.asks)?.info;\r\n\r\n  if (bids && asks) {\r\n    const bidsBook = new Orderbook(market, bids.accountFlags, bids.slab);\r\n    const asksBook = new Orderbook(market, asks.accountFlags, asks.slab);\r\n\r\n    return bbo(bidsBook, asksBook);\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\nconst refreshAccounts = async (connection: Connection, keys: string[]) => {\r\n  if (keys.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  return getMultipleAccounts(connection, keys, \"single\").then(\r\n    ({ keys, array }) => {\r\n      return array.map((item, index) => {\r\n        const address = keys[index];\r\n        return cache.add(new PublicKey(address), item);\r\n      });\r\n    }\r\n  );\r\n};\r\n\r\ninterface SerumMarket {\r\n  marketInfo: {\r\n    address: PublicKey;\r\n    name: string;\r\n    programId: PublicKey;\r\n    deprecated: boolean;\r\n  };\r\n\r\n  // 1st query\r\n  marketAccount?: AccountInfo<Buffer>;\r\n\r\n  // 2nd query\r\n  mintBase?: AccountInfo<Buffer>;\r\n  mintQuote?: AccountInfo<Buffer>;\r\n  bidAccount?: AccountInfo<Buffer>;\r\n  askAccount?: AccountInfo<Buffer>;\r\n  eventQueue?: AccountInfo<Buffer>;\r\n\r\n  swap?: {\r\n    dailyVolume: number;\r\n  };\r\n\r\n  midPrice?: (mint?: PublicKey) => number;\r\n}\r\n","import React, { useState, useLayoutEffect } from \"react\";\r\n// import {\r\n//   Navbar as Navigation,\r\n//   Container,\r\n//   Nav,\r\n//   NavDropdown,\r\n// } from \"react-bootstrap\";\r\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport { Menu, MenuList, MenuItem, Link, Grid } from \"@mui/material\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faDiscord } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nimport {\r\n  WalletMultiButton,\r\n  WalletDisconnectButton,\r\n} from \"@solana/wallet-adapter-react-ui\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"../../utils/candymachine\";\r\n\r\nimport { useLocation, Link as LinkIn } from \"react-router-dom\";\r\nimport \"./navbar.css\";\r\n\r\nfunction Navbar() {\r\n  const location = useLocation();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      if (window.innerWidth <= 600) {\r\n        document.getElementsByClassName(\"wallet-adapter-button\")[0].innerHTML =\r\n          \"Wallet\";\r\n        console.log(window.screen.width);\r\n      }\r\n      if (window.innerWidth > 600) {\r\n        document.getElementsByClassName(\"wallet-adapter-button\")[0].innerHTML =\r\n          \"Connect Wallet\";\r\n        console.log(window.screen.width);\r\n      }\r\n    }\r\n    window.addEventListener(\"resize\", updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener(\"resize\", updateSize);\r\n  }, []);\r\n\r\n  const wallet = useWallet();\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\" color=\"inherit\">\r\n        <Toolbar\r\n          sx={{\r\n            marginTop: \"0px\",\r\n            paddingLeft: \"0!important\",\r\n          }}\r\n        >\r\n          <Typography\r\n            variant=\"h6\"\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1 }}\r\n            className=\"logo-container\"\r\n          >\r\n            <LinkIn to=\"/\">\r\n              <img\r\n                src=\"/images/SSoS Logo.png\"\r\n                width=\"50\"\r\n                height=\"69\"\r\n                className=\"d-inline-block align-top nav-icon logo-img\"\r\n                alt=\"Secret Santas on Sol\"\r\n              />\r\n              <span className=\"ellipse-purple\"></span>\r\n            </LinkIn>\r\n          </Typography>\r\n          <div className=\"navbar-column\">\r\n            <Toolbar>\r\n              <Grid container justifyContent=\"center\" spacing={10}>\r\n                <Grid item>\r\n                  <Link\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"600\",\r\n                      fontSize: \"34px\",\r\n                      textAlign: \"center\",\r\n                      textDecoration: \"none\",\r\n                      lineHeight: \"41px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    How it works\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"600\",\r\n                      fontSize: \"34px\",\r\n                      textAlign: \"center\",\r\n                      textDecoration: \"none\",\r\n                      lineHeight: \"41px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    The Team\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"600\",\r\n                      fontSize: \"34px\",\r\n                      textAlign: \"center\",\r\n                      textDecoration: \"none\",\r\n                      lineHeight: \"41px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    FAQ\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    style={{\r\n                      color: \"white\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"600\",\r\n                      fontSize: \"34px\",\r\n                      textAlign: \"center\",\r\n                      textDecoration: \"none\",\r\n                      lineHeight: \"41px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    Mint\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Toolbar>\r\n          </div>\r\n          <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\r\n          <FontAwesomeIcon icon={[\"fab\", \"discord\"]} />\r\n          {!wallet.connected ? (\r\n            <WalletMultiButton\r\n              style={{ marginRight: \"30px\" }}\r\n            ></WalletMultiButton>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <div className=\"navbar-row\">\r\n            <Toolbar style={{ marginLeft: \"30px\", padding: \"0px\" }}>\r\n              <IconButton\r\n                size=\"large\"\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                aria-label=\"menu\"\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={open ? \"true\" : undefined}\r\n                sx={{ mr: 3 }}\r\n                onClick={handleClick}\r\n              >\r\n                <MenuIcon style={{ width: \"40px\", height: \"40px\" }} />\r\n              </IconButton>\r\n              <Menu open={open} onClose={handleClose} anchorEl={anchorEl}>\r\n                <MenuItem onClick={handleClose}>\r\n                  <LinkIn to=\"/\">How it works</LinkIn>\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>\r\n                  <LinkIn to=\"/tree\">The Team</LinkIn>\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>\r\n                  <LinkIn to=\"/\">FAQ</LinkIn>\r\n                </MenuItem>\r\n                <MenuItem onClick={handleClose}>\r\n                  <LinkIn to=\"/tree\">Mint</LinkIn>\r\n                </MenuItem>\r\n              </Menu>\r\n            </Toolbar>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./../../App.less\";\r\nimport { Grid, ThemeProvider, createTheme } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { WalletModalProvider } from \"@solana/wallet-adapter-ant-design\";\r\n\r\nimport { LABELS } from \"../../constants\";\r\nimport Navbar from \"../Navbar\";\r\n\r\n// const { Header, Content } = Layout;\r\n\r\nexport const AppLayout = React.memo(({ children }) => {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Grid container>{children}</Grid>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\"\r\nimport { useEffect, useState } from \"react\";\r\nimport Countdown from \"react-countdown\";\r\nimport styled from \"styled-components\";\r\nimport Button from '@mui/material/Button';\r\nimport {\r\n  CircularProgress,\r\n  Snackbar,\r\n  Grid\r\n} from \"@material-ui/core\";\r\nimport { Typography } from \"@mui/material\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  WalletMultiButton,\r\n  WalletDisconnectButton,\r\n} from \"@solana/wallet-adapter-react-ui\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"../../utils/candymachine\";\r\n// import {DateCountdown} from 'react-date-countdown-timer';\r\nimport \"./mint.css\"\r\n\r\n// const Countdown = DateCountdown()\r\nconst CounterText = styled.span``; // add your styles here\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\nconst MintButton = styled(Button)({\r\n  borderRadius: '60px',\r\n  backgroundColor: '#101921',\r\n  color: 'white',\r\n  marginBottom: '10px',\r\n  '&:hover': {\r\n    backgroundColor: '#01FFA3',\r\n    boxShadow: 'none',\r\n  },\r\n});\r\n\r\nexport interface MintProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Mint = (props: MintProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const anchorWallet = useAnchorWallet();\r\n\r\n  const wallet = useWallet();\r\n\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const {\r\n        candyMachine,\r\n        goLiveDate,\r\n        itemsAvailable,\r\n        itemsRemaining,\r\n        itemsRedeemed,\r\n      } = await getCandyMachineState(\r\n        anchorWallet as anchor.Wallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      console.log(itemsAvailable)\r\n      console.log(goLiveDate)\r\n\r\n      setItemsAvailable(itemsAvailable);\r\n      setItemsRemaining(itemsRemaining);\r\n      setItemsRedeemed(itemsRedeemed);\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n    })();\r\n  };\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n      refreshCandyMachineState();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (\r\n        !wallet ||\r\n        !wallet.publicKey ||\r\n        !wallet.signAllTransactions ||\r\n        !wallet.signTransaction\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const anchorWallet = {\r\n        publicKey: wallet.publicKey,\r\n        signAllTransactions: wallet.signAllTransactions,\r\n        signTransaction: wallet.signTransaction,\r\n      } as anchor.Wallet;\r\n\r\n      const {\r\n        candyMachine,\r\n        goLiveDate,\r\n        itemsRemaining,\r\n        itemsAvailable,\r\n        itemsRedeemed,\r\n      } = await getCandyMachineState(\r\n        anchorWallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n      setItemsAvailable(itemsAvailable);\r\n      setItemsRedeemed(itemsRedeemed);\r\n      setItemsRemaining(itemsRemaining);\r\n    })();\r\n  }, [wallet, props.candyMachineId, props.connection]);\r\n  return (\r\n    <main>\r\n      <Grid\r\n        container\r\n        spacing={1}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ marginTop: \"25px\" }}\r\n      >\r\n        <Grid\r\n          container\r\n          item\r\n          xs={12}\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n        </Grid>\r\n        {!wallet.connected ? (\r\n          <div></div>\r\n        ) : (\r\n          <Grid\r\n            container\r\n            spacing={1}\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid\r\n              container\r\n              item\r\n              xs={3}\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Typography variant=\"h6\">\r\n                Santa Tokens Remaining: {itemsRemaining}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={3}\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Typography variant=\"h6\">\r\n                Santa Tokens Redeemed: {itemsRedeemed}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <Grid\r\n          container\r\n          item\r\n          xs={12}\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          {!wallet.connected ? (\r\n            <MintButton variant=\"contained\" size=\"large\">\r\n              <Typography sx={{\r\n                fontFamily: 'Montserrat',\r\n                fontWeight: '700',\r\n                fontSize: '20px'\r\n              }}>\r\n                Mint SSoS Token\r\n              </Typography>\r\n            </MintButton>\r\n          ) : (\r\n            <MintContainer>\r\n              <Grid container\r\n                item\r\n                xs={12}\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"><Countdown\r\n                  date={startDate.toString()}\r\n                  onMount={({ completed }) =>\r\n                    completed && setIsActive(true)\r\n                  }\r\n                  onComplete={() => setIsActive(true)}\r\n                  renderer={renderCounter}\r\n                />\r\n              </Grid>\r\n              <Grid container\r\n                item\r\n                xs={12}\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\">\r\n                <MintButton\r\n                  disabled={isSoldOut || isMinting || !isActive}\r\n                  onClick={onMint}\r\n                  variant=\"contained\"\r\n                >\r\n                  {isSoldOut ? (\r\n                    \"SOLD OUT\"\r\n                  ) : isActive ? (\r\n                    isMinting ? (\r\n                      <CircularProgress />\r\n                    ) : (\r\n                      \"Mint now 0.1 SOL\"\r\n                    )\r\n                  ) : (\r\n                    <div>\r\n                      <MintButton disabled={isActive}>\r\n                        Mint SSoS Token\r\n                      </MintButton>\r\n                    </div>\r\n                  )}\r\n                </MintButton>\r\n              </Grid>\r\n            </MintContainer>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n","import * as React from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useConnection } from \"@solana/wallet-adapter-react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Mint from \"../mint\";\r\nimport Countdown from \"react-countdown\";\r\n// import \"./mint.css\";\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000;\r\n\r\nfunction MintBox() {\r\n  const connection = useConnection();\r\n  const countDownRenderer = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: any) => {\r\n    if (completed) {\r\n      // Render a complete state\r\n      return (\r\n        <Mint\r\n          candyMachineId={candyMachineId}\r\n          config={config}\r\n          connection={connection.connection}\r\n          startDate={startDateSeed}\r\n          treasury={treasury}\r\n          txTimeout={txTimeout}\r\n        ></Mint>\r\n      );\r\n    } else {\r\n      // Render a countdown\r\n      return (\r\n        <Box\r\n          sx={{\r\n            margin: \"auto\",\r\n            backgroundColor: \"#FCF8EA\",\r\n            width: \"90%\",\r\n            borderRadius: \"11px\",\r\n            marginBottom: \"20px\",\r\n          }}\r\n        >\r\n          <Grid container justifyContent=\"center\">\r\n            <Grid\r\n              item\r\n              xs={3}\r\n              md={3}\r\n              sx={{\r\n                background:\r\n                  \"url(/images/santa-mint-box-line.png) right no-repeat\",\r\n              }}\r\n            >\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"28px\",\r\n                    }}\r\n                  >\r\n                    {days}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <p className=\"time-unit\">Days</p>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={3}\r\n              md={3}\r\n              sx={{\r\n                background:\r\n                  \"url(/images/santa-mint-box-line.png) right no-repeat\",\r\n              }}\r\n            >\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"28px\",\r\n                    }}\r\n                  >\r\n                    {hours}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <p className=\"time-unit\">Hours</p>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={3}\r\n              md={3}\r\n              sx={{\r\n                background:\r\n                  \"url(/images/santa-mint-box-line.png) right no-repeat\",\r\n              }}\r\n            >\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"28px\",\r\n                    }}\r\n                  >\r\n                    {minutes}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <p className=\"time-unit\">Minutes</p>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={3} md={3}>\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"28px\",\r\n                    }}\r\n                  >\r\n                    {seconds}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n                <Box>\r\n                  <p className=\"time-unit\">Seconds</p>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      sx={{ marginTop: \"120px\" }}\r\n      className=\"mint-window-top\"\r\n    >\r\n      <Grid item xs={12} md={6} lg={6} marginBottom={5}>\r\n        <div className=\"mint-greeting-con\">\r\n          <Grid container justifyContent=\"center\" style={{ margin: \"auto\" }}>\r\n            <p className=\"mint-greeting-head\">Secret Santas on Solana</p>\r\n          </Grid>\r\n          <Grid container style={{ margin: \"auto\" }}>\r\n            <Box marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n              <p className=\"mint-greeting-content\">\r\n                Your destination to give back to \"Charity name\" and join a\r\n                secret Santa.\r\n              </p>\r\n            </Box>\r\n          </Grid>\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={12} md={6} lg={6}>\r\n        <div className={\"image-container\"}>\r\n          <Box\r\n            sx={{\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              marginBottom={3}\r\n            >\r\n              <p className=\"mint-word\">Mint Window Open for</p>\r\n            </Grid>\r\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n              <div className=\"mint-time\">\r\n                <Countdown\r\n                  date={Date.parse(\"13 Dec 2021 16:00:00 EST\") + 159800}\r\n                  renderer={countDownRenderer}\r\n                ></Countdown>\r\n              </div>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              marginBottom={3}\r\n            >\r\n              <button className=\"mint-button\">MINT SSoS TOKEN</button>\r\n            </Grid>\r\n          </Box>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nexport default MintBox;\r\n","import * as React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Typography, Avatar } from \"@mui/material\";\r\nexport default function Process() {\r\n  return (\r\n    <Grid justifyContent=\"center\">\r\n      <Box>\r\n        <div className=\"works-container\">\r\n          <p className=\"works-header\">How it works</p>\r\n          <div style={{ width: \"90%\", margin: \"auto\" }}>\r\n            <Grid\r\n              container\r\n              sx={{ width: \"87%!important\", margin: \"auto\" }}\r\n              justifyContent=\"center\"\r\n            >\r\n              <Grid item md={4} sx={{ margin: \"auto\" }}>\r\n                <Box sx={{}} marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n                  <Grid container justifyContent=\"center\">\r\n                    <div className=\"circle-bg\">\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: \"#DC1FFF\",\r\n                          fontWeight: \"600\",\r\n                          fontFamily: \"Montserrat\",\r\n                          width: \"61px\",\r\n                          height: \"61px\",\r\n                          letterSpacing: \"-0.5px\",\r\n                          margin: \"auto\",\r\n                          marginTop: \"100px\",\r\n                        }}\r\n                      >\r\n                        1\r\n                      </Avatar>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                    >\r\n                      Mint Secret Santa on <br /> SOL Token for 0.02SOL\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"17px\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      Lorem ipsum dolor sit\r\n                      <br /> amet, consectetur\r\n                      <br /> adipiscing elit. Morbi <br />\r\n                      tristique tincidunt nibh\r\n                      <br /> et dignissim.{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item md={4}>\r\n                <Box sx={{}} marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n                  <Grid container justifyContent=\"center\">\r\n                    <div className=\"circle-bg\">\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: \"#DC1FFF\",\r\n                          fontWeight: \"600\",\r\n                          fontFamily: \"Montserrat\",\r\n                          width: \"61px\",\r\n                          height: \"61px\",\r\n                          letterSpacing: \"-0.5px\",\r\n                          margin: \"auto\",\r\n                          marginTop: \"100px\",\r\n                        }}\r\n                      >\r\n                        2\r\n                      </Avatar>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                    >\r\n                      Mint Secret Santa on <br /> SOL Token for 0.02SOL\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"17px\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      Lorem ipsum dolor sit\r\n                      <br /> amet, consectetur\r\n                      <br /> adipiscing elit. Morbi <br />\r\n                      tristique tincidunt nibh\r\n                      <br /> et dignissim.{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item md={4}>\r\n                <Box sx={{}} marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n                  <Grid container justifyContent=\"center\">\r\n                    <div className=\"circle-bg\">\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: \"#DC1FFF\",\r\n                          fontWeight: \"600\",\r\n                          fontFamily: \"Montserrat\",\r\n                          width: \"61px\",\r\n                          height: \"61px\",\r\n                          letterSpacing: \"-0.5px\",\r\n                          margin: \"auto\",\r\n                          marginTop: \"100px\",\r\n                        }}\r\n                      >\r\n                        3\r\n                      </Avatar>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                    >\r\n                      Mint Secret Santa on <br /> SOL Token for 0.02SOL\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"17px\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      Lorem ipsum dolor sit\r\n                      <br /> amet, consectetur\r\n                      <br /> adipiscing elit. Morbi <br />\r\n                      tristique tincidunt nibh\r\n                      <br /> et dignissim.{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item md={4}>\r\n                <Box sx={{}} marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n                  <Grid container justifyContent=\"center\">\r\n                    <div className=\"circle-bg\">\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: \"#DC1FFF\",\r\n                          fontWeight: \"600\",\r\n                          fontFamily: \"Montserrat\",\r\n                          width: \"61px\",\r\n                          height: \"61px\",\r\n                          letterSpacing: \"-0.5px\",\r\n                          margin: \"auto\",\r\n                          marginTop: \"100px\",\r\n                        }}\r\n                      >\r\n                        4\r\n                      </Avatar>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                    >\r\n                      Mint Secret Santa on <br /> SOL Token for 0.02SOL\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"17px\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      Lorem ipsum dolor sit\r\n                      <br /> amet, consectetur\r\n                      <br /> adipiscing elit. Morbi <br />\r\n                      tristique tincidunt nibh\r\n                      <br /> et dignissim.{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item md={4}>\r\n                <Box sx={{}} marginLeft={\"auto\"} marginRight={\"auto\"}>\r\n                  <Grid container justifyContent=\"center\">\r\n                    <div className=\"circle-bg\">\r\n                      <Avatar\r\n                        sx={{\r\n                          bgcolor: \"#DC1FFF\",\r\n                          fontWeight: \"600\",\r\n                          fontFamily: \"Montserrat\",\r\n                          width: \"61px\",\r\n                          height: \"61px\",\r\n                          letterSpacing: \"-0.5px\",\r\n                          margin: \"auto\",\r\n                          marginTop: \"100px\",\r\n                        }}\r\n                      >\r\n                        5\r\n                      </Avatar>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"18px\",\r\n                        fontWeight: \"bold\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                      }}\r\n                    >\r\n                      Mint Secret Santa on <br /> SOL Token for 0.02SOL\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid container marginTop={1} justifyContent=\"center\">\r\n                    <Typography\r\n                      sx={{\r\n                        textAlign: \"center\",\r\n                        width: \"220px\",\r\n                        fontSize: \"17px\",\r\n                        lineHeight: \"24px\",\r\n                        fontFamily: \"Montserrat\",\r\n                        marginTop: \"10px\",\r\n                      }}\r\n                    >\r\n                      Lorem ipsum dolor sit\r\n                      <br /> amet, consectetur\r\n                      <br /> adipiscing elit. Morbi <br />\r\n                      tristique tincidunt nibh\r\n                      <br /> et dignissim.{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item md={4}>\r\n                <div style={{ width: \"220px\" }}> </div>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Link from '@mui/material/Link'\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport { autocompleteClasses, Typography } from \"@mui/material\";\r\n\r\nexport default function Team() {\r\n  return (\r\n    <div justifyContent=\"center\" className=\"team-container\">\r\n      <Typography\r\n        sx={{\r\n          fontFamily: \"Montserrat\",\r\n          fontWeight: \"600\",\r\n          fontSize: \"42px\",\r\n          color: \"#01FFA3\",\r\n          textAlign:'center'\r\n        }}\r\n      >\r\n        The Team\r\n      </Typography>\r\n      <Typography\r\n        marginTop={3}\r\n        sx={{\r\n          fontFamily: \"Montserrat\",\r\n          fontWeight: \"normal\",\r\n          fontSize: \"20px\",\r\n          color: \"#FFFFFF\",\r\n          textAlign:'center',\r\n          padding:'10px'\r\n        }}\r\n      >\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi tristique tincidunt nibh et dignissim.\r\n      </Typography>\r\n      <Grid container >\r\n        <Grid container justifyContent=\"center\" className=\"team-content\">\r\n          <Grid item md={4}>\r\n            <div className=\"avatar-container1\" >\r\n              <div className=\"dev-content\">\r\n                <Avatar alt=\"Khalil\" src=\"/images/khalil.png\" sx={{ width: 131, height: 131,margin:' auto', marginTop: '-70px' }}></Avatar>\r\n                <Grid container justifyContent=\"center\">\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"#DC1FFF\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"42px\",\r\n                      marginTop:'10px'\r\n                    }}\r\n                  >\r\n                    Khalil\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\">\r\n                  <Typography \r\n                    sx={{\r\n                      fontFamily: 'Montserrat',\r\n                      fontStyle: 'normal',\r\n                      fontWeight:' normal',\r\n                      fontSize: '26px',\r\n                      lineHeight: '32px',\r\n                      textAlign: 'center',\r\n                    }}\r\n                  >Developer /<br />Creator</Typography>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\">\r\n                <Link href=\"https://twitter.com/khaiilnafis\"\r\n                  sx={{\r\n                    fontFamily: 'Montserrat',\r\n                    fontStyle: 'normal',\r\n                    fontWeight: 'bold',\r\n                    fontSize: '20px',\r\n                    lineHeight: '24px',\r\n                    textAlign: 'center',\r\n                    textDecorationLine: 'underline',\r\n                    marginTop:'20px',\r\n                    marginBottom:'20px',\r\n                  }}\r\n                >@KhaIilnafis</Link>\r\n                </Grid>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item md={4}>\r\n          <div className=\"avatar-container2\" >\r\n            <div className=\"dev-content\" >\r\n              <Avatar alt=\"Khalil\" src=\"/images/allan.png\" sx={{ width: 131, height: 131,margin:' auto', marginTop: '-70px' }}></Avatar>\r\n              <Grid container justifyContent=\"center\">\r\n                <Typography\r\n                  sx={{\r\n                    color: \"#DC1FFF\",\r\n                    fontFamily: \"Montserrat\",\r\n                    fontWeight: \"700\",\r\n                    fontSize: \"42px\",\r\n                    marginTop:'10px'\r\n                  }}\r\n                >\r\n                  Allan\r\n                </Typography>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n                <Typography \r\n                  sx={{\r\n                    fontFamily: 'Montserrat',\r\n                    fontStyle: 'normal',\r\n                    fontWeight:' normal',\r\n                    fontSize: '26px',\r\n                    lineHeight: '32px',\r\n                    textAlign: 'center',\r\n                  }}\r\n                >Front End<br />Developer</Typography>\r\n              </Grid>\r\n              <Grid container justifyContent=\"center\">\r\n              <Link href=\"https://twitter.com/khaiilnafis\"\r\n                sx={{\r\n                  fontFamily: 'Montserrat',\r\n                  fontStyle: 'normal',\r\n                  fontWeight: 'bold',\r\n                  fontSize: '20px',\r\n                  lineHeight: '24px',\r\n                  textAlign: 'center',\r\n                  textDecorationLine: 'underline',\r\n                  marginTop:'20px',\r\n                  marginBottom:'20px',\r\n                }}\r\n              >@so1a11ana</Link>\r\n              </Grid>\r\n            </div>\r\n          </div>\r\n          </Grid>\r\n          <Grid item md={4}>\r\n          <div className=\"avatar-container3\" >\r\n            <div className=\"dev-content\" >\r\n                <Avatar alt=\"Khalil\" src=\"/images/dre.png\" sx={{ width: 131, height: 131,margin:' auto', marginTop: '-70px' }}></Avatar>\r\n                <Grid container justifyContent=\"center\">\r\n                  <Typography\r\n                    sx={{\r\n                      color: \"#DC1FFF\",\r\n                      fontFamily: \"Montserrat\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"42px\",\r\n                      marginTop:'10px'\r\n                    }}\r\n                  >\r\n                    DeAndre\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\">\r\n                  <Typography \r\n                    sx={{\r\n                      fontFamily: 'Montserrat',\r\n                      fontStyle: 'normal',\r\n                      fontWeight:' normal',\r\n                      fontSize: '26px',\r\n                      lineHeight: '32px',\r\n                      textAlign: 'center',\r\n                    }}\r\n                  >Product Manager<br /> / Designer</Typography>\r\n                </Grid>\r\n                <Grid container justifyContent=\"center\">\r\n                <Link href=\"https://twitter.com/khaiilnafis\"\r\n                  sx={{\r\n                    fontFamily: 'Montserrat',\r\n                    fontStyle: 'normal',\r\n                    fontWeight: 'bold',\r\n                    fontSize: '20px',\r\n                    lineHeight: '24px',\r\n                    textAlign: 'center',\r\n                    textDecorationLine: 'underline',\r\n                    marginTop:'20px',\r\n                    marginBottom:'20px',\r\n                  }}\r\n                >@DreLaSol</Link>\r\n                </Grid>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Box, Typography } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nexport default function Exchange() {\r\n  return (\r\n    <Grid marginTop={5} marginBottom={30}>\r\n      <Grid justifyContent=\"center\">\r\n        <Typography\r\n          sx={{\r\n            fontFamily: \"Montserrat\",\r\n            fontWeight: \"600\",\r\n            fontSize: \"42px\",\r\n            width: \"280px\",\r\n            lineHeight: \" 51px\",\r\n          }}\r\n          paddingLeft={5}\r\n          paddingRight={5}\r\n        >\r\n          Secret Santa Exchange\r\n        </Typography>\r\n      </Grid>\r\n      <Grid justifyContent=\"center\">\r\n        <Typography\r\n          sx={{\r\n            fontFamily: \"Montserrat\",\r\n            fontWeight: \"400\",\r\n            fontSize: \"20px\",\r\n            width: \"250px\",\r\n            lineHeight: \" 24px\",\r\n            marginTop: \"30px\",\r\n          }}\r\n          paddingLeft={5}\r\n          paddingRight={5}\r\n        >\r\n          Your destination to give back to \"Charity name\" and join a secret\r\n          Santa.\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid container marginBottom={3}>\r\n        <button className=\"exchange-button\"></button>\r\n      </Grid>\r\n      <Grid justifyContent=\"center\">\r\n        <Typography\r\n          sx={{\r\n            fontFamily: \"Montserrat\",\r\n            fontWeight: \"600\",\r\n            fontSize: \"42px\",\r\n            width: \"280px\",\r\n            lineHeight: \" 51px\",\r\n          }}\r\n          paddingLeft={5}\r\n          paddingRight={5}\r\n        >\r\n          FAQ\r\n        </Typography>\r\n      </Grid>\r\n      <Grid justifyContent=\"center\">\r\n        <Typography\r\n          sx={{\r\n            fontFamily: \"Montserrat\",\r\n            fontWeight: \"400\",\r\n            fontSize: \"20px\",\r\n            width: \"250px\",\r\n            lineHeight: \" 24px\",\r\n            marginTop: \"30px\",\r\n          }}\r\n          paddingLeft={5}\r\n          paddingRight={5}\r\n        >\r\n          Your destination to give back to \"Charity name\" and join a secret\r\n          Santa.\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { WalletAdapter } from \"@solana/wallet-adapter-base\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Grid, Box, Container } from \"@material-ui/core\";\r\nimport { useConnectionConfig } from \"../../contexts/connection\";\r\nimport { useConnection } from \"@solana/wallet-adapter-react\";\r\n// import Mint from \"../mint\";\r\nimport Hero from \"../hero\";\r\nimport MintBox from \"../mint-box\";\r\nimport Process from \"../process\";\r\nimport Team from \"../team\";\r\nimport Exchange from \"../exchange\";\r\nimport FAQ from \"../faq\";\r\nimport Footer from \"../footer\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport \"./home.css\";\r\n\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000;\r\n\r\nexport const HomeView = () => {\r\n  const connection = useConnection();\r\n  return (\r\n    <Container className=\"hello\" style={{ padding: \"0px\" }}>\r\n      <Grid\r\n        container\r\n        justifyContent=\"center\"\r\n        style={{ width: \"100%!important\", paddingLeft: \"0px!important\" }}\r\n      >\r\n        <Grid item>\r\n          {/* <Hero></Hero> */}\r\n          <MintBox></MintBox>\r\n          <Process></Process>\r\n          <Team></Team>\r\n          <Exchange></Exchange>\r\n          {/* <FAQ></FAQ>\r\n          <Footer></Footer> */}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport {Grid} from '@mui/material';\r\n\r\nexport default function TreeView (){\r\n    return(<Grid></Grid>)\r\n}","import { Route, Routes, BrowserRouter } from \"react-router-dom\";\r\nimport React, { useMemo } from \"react\";\r\nimport {\r\n  WalletProvider,\r\n  ConnectionProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n// import { ConnectionProvider } from \"./contexts/connection\";\r\nimport { AccountsProvider } from \"./contexts/accounts\";\r\nimport { MarketProvider } from \"./contexts/market\";\r\nimport { AppLayout } from \"./components/Layout\";\r\n\r\nimport { HomeView } from \"./views\";\r\nimport TreeView from \"./views/tree\";\r\n\r\nimport {\r\n  getLedgerWallet,\r\n  getMathWallet,\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolongWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\r\nexport function AppRoutes() {\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getLedgerWallet(),\r\n      getSolongWallet(),\r\n      getMathWallet(),\r\n      getSolletWallet(),\r\n    ],\r\n    []\r\n  );\r\n  const network = WalletAdapterNetwork.Devnet;\r\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n  return (\r\n    <BrowserRouter basename={\"/\"}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets}>\r\n          <AccountsProvider>\r\n            <WalletModalProvider>\r\n              <MarketProvider>\r\n                <AppLayout>\r\n                  <Routes>\r\n                    <Route path=\"/\" element={<HomeView />} />\r\n                    <Route path=\"/tree\" element={<TreeView />} />\r\n                  </Routes>\r\n                </AppLayout>\r\n              </MarketProvider>\r\n            </WalletModalProvider>\r\n          </AccountsProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.less\";\r\nimport { AppRoutes } from \"./routes\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nfunction App() {\r\n  return <AppRoutes />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n// import * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n","import BN from \"bn.js\";\r\n\r\nexport const TEN = new BN(10);\r\nexport const HALF_WAD = TEN.pow(new BN(18));\r\nexport const WAD = TEN.pow(new BN(18));\r\nexport const RAY = TEN.pow(new BN(27));\r\nexport const ZERO = new BN(0);\r\nexport const LAMPORTS_PER_SOL = 1000000000;\r\n","import { useCallback, useState } from \"react\";\r\nimport { MintInfo } from \"@solana/spl-token\";\r\n\r\nimport { TokenAccount } from \"./../models\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { WAD, ZERO } from \"../constants\";\r\nimport { TokenInfo } from \"@solana/spl-token-registry\";\r\n\r\nexport type KnownTokenMap = Map<string, TokenInfo>;\r\n\r\nexport const formatPriceNumber = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 8,\r\n});\r\n\r\nexport function useLocalStorageState(key: string, defaultState?: string) {\r\n  const [state, setState] = useState(() => {\r\n    // NOTE: Not sure if this is ok\r\n    const storedState = localStorage.getItem(key);\r\n    if (storedState) {\r\n      return JSON.parse(storedState);\r\n    }\r\n    return defaultState;\r\n  });\r\n\r\n  const setLocalStorageState = useCallback(\r\n    (newState) => {\r\n      const changed = state !== newState;\r\n      if (!changed) {\r\n        return;\r\n      }\r\n      setState(newState);\r\n      if (newState === null) {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        localStorage.setItem(key, JSON.stringify(newState));\r\n      }\r\n    },\r\n    [state, key]\r\n  );\r\n\r\n  return [state, setLocalStorageState];\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n}\r\n\r\nexport function getTokenName(\r\n  map: KnownTokenMap,\r\n  mint?: string | PublicKey,\r\n  shorten = true\r\n): string {\r\n  const mintAddress = typeof mint === \"string\" ? mint : mint?.toBase58();\r\n\r\n  if (!mintAddress) {\r\n    return \"N/A\";\r\n  }\r\n\r\n  const knownSymbol = map.get(mintAddress)?.symbol;\r\n  if (knownSymbol) {\r\n    return knownSymbol;\r\n  }\r\n\r\n  return shorten ? `${mintAddress.substring(0, 5)}...` : mintAddress;\r\n}\r\n\r\nexport function getTokenByName(tokenMap: KnownTokenMap, name: string) {\r\n  let token: TokenInfo | null = null;\r\n  for (const val of tokenMap.values()) {\r\n    if (val.symbol === name) {\r\n      token = val;\r\n      break;\r\n    }\r\n  }\r\n  return token;\r\n}\r\n\r\nexport function getTokenIcon(\r\n  map: KnownTokenMap,\r\n  mintAddress?: string | PublicKey\r\n): string | undefined {\r\n  const address =\r\n    typeof mintAddress === \"string\" ? mintAddress : mintAddress?.toBase58();\r\n  if (!address) {\r\n    return;\r\n  }\r\n\r\n  return map.get(address)?.logoURI;\r\n}\r\n\r\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\r\n  return !!map.get(mintAddress);\r\n}\r\n\r\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\r\n\r\nexport function chunks<T>(array: T[], size: number): T[][] {\r\n  return Array.apply<number, T[], T[][]>(\r\n    0,\r\n    new Array(Math.ceil(array.length / size))\r\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\r\n}\r\n\r\nexport function toLamports(\r\n  account?: TokenAccount | number,\r\n  mint?: MintInfo\r\n): number {\r\n  if (!account) {\r\n    return 0;\r\n  }\r\n\r\n  const amount =\r\n    typeof account === \"number\" ? account : account.info.amount?.toNumber();\r\n\r\n  const precision = Math.pow(10, mint?.decimals || 0);\r\n  return Math.floor(amount * precision);\r\n}\r\n\r\nexport function wadToLamports(amount?: BN): BN {\r\n  return amount?.div(WAD) || ZERO;\r\n}\r\n\r\nexport function fromLamports(\r\n  account?: TokenAccount | number | BN,\r\n  mint?: MintInfo,\r\n  rate: number = 1.0\r\n): number {\r\n  if (!account) {\r\n    return 0;\r\n  }\r\n\r\n  const amount = Math.floor(\r\n    typeof account === \"number\"\r\n      ? account\r\n      : BN.isBN(account)\r\n      ? account.toNumber()\r\n      : account.info.amount.toNumber()\r\n  );\r\n\r\n  const precision = Math.pow(10, mint?.decimals || 0);\r\n  return (amount / precision) * rate;\r\n}\r\n\r\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\r\n\r\nconst abbreviateNumber = (number: number, precision: number) => {\r\n  let tier = (Math.log10(number) / 3) | 0;\r\n  let scaled = number;\r\n  let suffix = SI_SYMBOL[tier];\r\n  if (tier !== 0) {\r\n    let scale = Math.pow(10, tier * 3);\r\n    scaled = number / scale;\r\n  }\r\n\r\n  return scaled.toFixed(precision) + suffix;\r\n};\r\n\r\nexport const formatAmount = (\r\n  val: number,\r\n  precision: number = 6,\r\n  abbr: boolean = true\r\n) => (abbr ? abbreviateNumber(val, precision) : val.toFixed(precision));\r\n\r\nexport function formatTokenAmount(\r\n  account?: TokenAccount,\r\n  mint?: MintInfo,\r\n  rate: number = 1.0,\r\n  prefix = \"\",\r\n  suffix = \"\",\r\n  precision = 6,\r\n  abbr = false\r\n): string {\r\n  if (!account) {\r\n    return \"\";\r\n  }\r\n\r\n  return `${[prefix]}${formatAmount(\r\n    fromLamports(account, mint, rate),\r\n    precision,\r\n    abbr\r\n  )}${suffix}`;\r\n}\r\n\r\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n});\r\n\r\nexport const numberFormatter = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const isSmallNumber = (val: number) => {\r\n  return val < 0.001 && val > 0;\r\n};\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number, useSmall?: boolean) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n    if (useSmall && isSmallNumber(val)) {\r\n      return 0.001;\r\n    }\r\n\r\n    return numberFormatter.format(val);\r\n  },\r\n};\r\n\r\nexport const feeFormatter = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 9,\r\n});\r\n\r\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"percent\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport function convert(\r\n  account?: TokenAccount | number,\r\n  mint?: MintInfo,\r\n  rate: number = 1.0\r\n): number {\r\n  if (!account) {\r\n    return 0;\r\n  }\r\n\r\n  const amount =\r\n    typeof account === \"number\" ? account : account.info.amount?.toNumber();\r\n\r\n  const precision = Math.pow(10, mint?.decimals || 0);\r\n  let result = (amount / precision) * rate;\r\n\r\n  return result;\r\n}\r\n","import { TokenAccount } from \"../models\";\r\nimport { useAccountsContext } from \"./../contexts/accounts\";\r\n\r\nexport function useUserAccounts() {\r\n  const context = useAccountsContext();\r\n  return {\r\n    userAccounts: context.userAccounts as TokenAccount[],\r\n  };\r\n}\r\n"],"sourceRoot":""}